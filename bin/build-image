#!/usr/bin/env bash
#
# Builds docker source images from git repo

set -eu

### Env variables expected to be overwritten
# name of the result image
NAME=${NAME:-'test-app'}
# registry to push result image into
REGISTRY=${REGISTRY:-'localhost:5000'}
REGISTRY_PROTOCOL=${REGISTRY_PROTOCOL:-'http'}
# user to authenticate agains registry
REGISTRY_USER=${REGISTRY_USER:-'admin'}
REGISTRY_PW=${REGISTRY_PW:-'badmin'}

tags=()
original_ifs="${IFS}"

# Makes authenticated GET request to registry
#
# args:
#     $1 request_url (string)
#     $2 fail_on_error (boolean,optional,default:false): If true - returns non zero value when request fails
#         (can be because given image name does no exist in registry)
function registry_request {
    local requested_url="${1}"
    local curl_options=()
    if [[ ${2:-false} == true ]]; then
        curl_options+=('--fail')
    fi
    local auth_params_string=$(curl --silent --include "${requested_url}" | grep --perl-regexp --only-matching --ignore-case '(?<=Www-Authenticate: Bearer )[^\r\n]*')
    local IFS=','
    local auth_params_strings=(${auth_params_string})
    local IFS="${original_ifs}"
    local request_query_strings=()
    local auth_url=''
    for param_string in "${auth_params_strings[@]}"; do
        local param_name="${param_string%%=*}"
        local param_val="${param_string#*=\"}"
        param_val="${param_val%\"}"

        case "${param_name}" in
            realm)
                auth_url="${param_val}"
                ;;
            *)
                request_query_strings+=("--data-urlencode" "${param_name}=${param_val}")
                ;;
        esac
    done

    local token=$(curl --get --silent --user "${REGISTRY_USER}:${REGISTRY_PW}" "${request_query_strings[@]}" "${auth_url}" | jq --raw-output '.token')
    curl_options+=('--header' "Authorization: Bearer ${token}" "${requested_url}")
    curl "${curl_options[@]}"
}

function append_git_tags {
    local IFS=$'\n'
    tags+=($(git tag --list --points-at HEAD))
}

function append_commit_tag {
    if git log --format=%B --max-count 1 | grep 'build image'; then
        local commit=$(git log --format=%H)
        tags+=(${commit:0:7})
    fi
}

append_git_tags
append_commit_tag

if [[ ${#tags[@]} -eq 0 ]]; then
    printf "No tags found. Canceling image build...\n"
    exit 0
fi

# Removes tags which already exists in registry
if registry_request "${REGISTRY_PROTOCOL}://${REGISTRY}/v2/${NAME}/tags/list" true > /dev/null 2>&1; then
    condition=''
    tags_json_string='['
    for tag in "${tags[@]}"; do
        condition+=". == \"${tag}\" or"
        tags_json_string+="\"${tag}\"",
    done
    condition="${condition%' or'}"
    tags_json_string="${tags_json_string%','}]"

    tags_string=$(registry_request "${REGISTRY_PROTOCOL}://${REGISTRY}/v2/${NAME}/tags/list" | jq --raw-output "${tags_json_string} - [.tags[] | select(${condition})] | .[]")
    IFS=$'\n'
    tags=(${tags_string})
    IFS="${original_ifs}"
    if [[ ${#tags[@]} -eq 0 ]]; then
        printf "All tags already exists. Cancelling image build...\n"
        exit 0
    fi
fi

printf "Found tags: ${tags[*]}. Building image...\n"

cp .env.docker .env

tag_args=()
for tag in "${tags[@]}"; do
    tag_args+=("--tag" "${REGISTRY}/${NAME}:${tag}")
done

docker build . "${tag_args[@]}"
docker login --username "${REGISTRY_USER}" --password "${REGISTRY_PW}" "${REGISTRY}"
for tag in "${tags[@]}"; do
    docker push "${REGISTRY}/${NAME}:${tag}"
done

